# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 3  # number of classes
depth_multiple: 0.33  # model depth multiple  控制模型深度，与参数中number相乘，即可得到该模块里的残差模块的数量
width_multiple: 0.50  # layer channel multiple  控制模型宽度，与参数里args[0]相乘，即可得到该模块里的卷积核的数量
#depth_multiple: 1.33  # model depth multiple
#width_multiple: 1.25  # layer channel multiple

anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]  # from是指输入来自于哪一层，-1是来自于上一层，第一层从0开始
                                  # number是指模块的数量，用于计算C3模块里残差块的数量，其他模块number数是1，不参与计算，大于1才会计算，
                                        # 例如number=3, 033*3 = 1，就是指C3里包含一个残差模块
                                  # module是指模块的名称
                                  # args需要输入到模块的参数
  [
   [-1, 1, Fusion, []],  # 加了一层之后，所有拼接的层数加一
   [-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2  宽度系数是0.5，所以卷积核是64*0.5=32，前一层是图像通道为3，所以该层输入3，输出32，kernel_size是6，stride是2，padding是2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  input:32  output:64  kernel:3  stride:2  padding:1
   [-1, 3, C3STR, [128]],       # C3 --> C3STR
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3STR, [256]],       # C3 --> C3STR
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3STR, [512]],       # C3 --> C3STR
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3STR, [1024]],      # C3 --> C3STR
   [-1, 1, C3STR, [1024, 5]],   # 9  C3 --> C3STR
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 7], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3STR, [512, False]],  # 13  C3 --> C3STR

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 5], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3STR, [256, False]],  # 17 (P3/8-small)  C3 --> C3STR

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 15], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3STR, [512, False]],  # 20 (P4/16-medium)  C3 --> C3STR

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 11], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3STR, [1024, False]],  # 23 (P5/32-large)  C3 --> C3STR

#   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
   [[0, 18, 21, 24], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
